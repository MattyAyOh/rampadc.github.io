<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="983" height="42" borderStyle="solid" creationComplete="init(event)"
				   >
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			static public const SPEAR:String = "spear";
			static public const SWORD:String = "sword";
			static public const ARCHER:String = "archer";
			static public const AXE:String = "axe";
			static public const LC:String = "light cavalry";
			static public const MA:String = "mounted archer";
			static public const HC:String = "heavy cavalry";
			static public const RAM:String = "ram";
			static public const CAT:String = "catapult";
			static public const SERK:String = "berserker";
			static public const TREB:String = "trebuchet";
			static public const SNOB:String = "nobleman";
			static public const KNIGHT:String = "paladin";
			
			[Bindable]
			private var _originCoor:Point;
			[Bindable]
			private var _originName:String;
			private var _originId:Number;
			
			private var _attUnit:String;
			private var _targets:Vector.<Point>;
			
			private var _targetCoor:Point;
			private var _targetName:String = "";
			private var _targetId:Number;

			private var _first:Boolean;
			
			private var _worldSpeed:Number;
			
			[Bindable]
			private var _unitsList:Array;
			
			[Bindable]
			private var _targetsList:ArrayCollection;
			
			public function get worldSpeed():Number
			{
				return _worldSpeed;
			}

			public function set worldSpeed(value:Number):void
			{
				_worldSpeed = value;
			}

			public function get targetId():Number
			{
				return _targetId;
			}

			public function set targetId(value:Number):void
			{
				_targetId = value;
			}

			public function get villageId():Number
			{
				return _originId;
			}

			public function set villageId(value:Number):void
			{
				_originId = value;
			}

			public function get targetName():String
			{
				return _targetName;
			}

			public function set targetsList(value:Array):void
			{
				_targetsList = new ArrayCollection(value);
			}

			public function get villageName():String
			{
				return _originName;
			}

			public function set villageName(value:String):void
			{
				_originName = value;
			}

			public function get first():Boolean
			{
				return _first;
			}

			public function set first(value:Boolean):void
			{
				_first = value;
			}

			public function get target():Point
			{
				return _targetCoor;
			}

			public function set target(value:Point):void
			{
				_targetCoor = value;
			}

			public function get attUnit():String
			{
				return _attUnit;
			}

			public function set attUnit(value:String):void
			{
				_attUnit = value;
			}

			public function get villageCoor():Point
			{
				return _originCoor;
			}

			public function set villageCoor(value:Point):void
			{
				_originCoor = value;
			}

			protected function init(event:FlexEvent):void
			{
				_unitsList = new Array(SPEAR, SWORD, AXE, ARCHER, LC, MA, HC, RAM, CAT, SERK, TREB, SNOB, KNIGHT);
//				_unitsList = new Array(RAM, SNOB);
			}
			
			protected function attUnitType_changeHandler(event:IndexChangeEvent):void
			{
				if(attUnitType.selectedItem != SNOB) {
					prioritzeAttackCB.enabled = true;
					this.setStyle("borderColor", 0xFF0000);
				} else {
					this.setStyle("borderColor", 0x8F01DD);
					prioritzeAttackCB.enabled = false;
					prioritzeAttackCB.selected = false;
				}
				
				if(_targetName != "") {
					travelTimeLbl.text = Attack.formatTimerPeriod(Attack.calculateTravelTime(_originCoor, _targetCoor, String(attUnitType.selectedItem), worldSpeed));
				}
				
			}
			
			protected function targetVillages_changeHandler(event:IndexChangeEvent):void
			{
				var startIndexCoor:uint = String(targetVillages.selectedItem).length - 8;
				var targetNameRegex:RegExp = /(.+)\s+\(([0-9]+)\|([0-9]+)\)\s*(.+)*/;
				
				var obj:Object = targetNameRegex.exec(String(targetVillages.selectedItem));
				if(obj != null) {
					_targetName = obj[1];
					_targetCoor = new Point(Number(obj[2]), Number(obj[3]));
					_targetId = Number(obj[4]);
				} else {
					_targetName = "";
				}
			}
			
			protected function prioritizeAttCB_clickHandler(event:MouseEvent):void
			{
				_first = prioritzeAttackCB.selected;
			}
			
			protected function clearBtn_clickHandler(event:MouseEvent):void
			{
				this.setStyle('borderColor', 0xb7babc);
				targetVillages.selectedIndex = -1;
				attUnitType.selectedIndex = -1;
			}
			
			private function toArray(iterable:*):Array {
				var ret:Array = [];
				for each (var elem:String in iterable) ret.push(elem);
				return ret;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:layout>
		<s:HorizontalLayout gap="5" paddingBottom="5" paddingLeft="5" paddingRight="5"
							paddingTop="5" verticalAlign="middle"/>
	</s:layout>
	
	<s:Label width="176" text="{_originName}" textAlign="left"/>
	<s:Label width="50" text="{_originCoor.x}|{_originCoor.y}" textAlign="center" verticalAlign="middle"/>
	
	<s:HGroup gap="0" verticalAlign="bottom">
		<s:DropDownList id="targetVillages" width="262" change="targetVillages_changeHandler(event)"
						dataProvider="{_targetsList}" prompt="select a target..." textAlign="left"></s:DropDownList>		
	</s:HGroup>
	
	<s:HGroup gap="0" verticalAlign="middle">
		<s:DropDownList id="attUnitType" width="128" change="attUnitType_changeHandler(event)"
						prompt="attack unit type" textAlign="left" toolTip="Attack unit type">
			<s:dataProvider>
				<s:ArrayList source="{_unitsList}"></s:ArrayList>
			</s:dataProvider>
		</s:DropDownList>
	</s:HGroup>
	<s:CheckBox id="prioritzeAttackCB" height="19" label="First" click="prioritizeAttCB_clickHandler(event)"
				enabled="true"/>
	<s:Button id="clearBtn" width="60" label="Clear" click="clearBtn_clickHandler(event)"/>
	<s:Label fontWeight="bold" text="Travel time:"/><s:Label id="travelTimeLbl" width="151"
															 textAlign="left"/>
</s:BorderContainer>
