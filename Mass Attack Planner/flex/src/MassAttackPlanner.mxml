<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:local="*"
					   minWidth="1024" minHeight="500"
					   creationComplete="init(event)">
	
	<fx:Script>
		<![CDATA[
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			import flash.globalization.DateTimeFormatter;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.events.TextOperationEvent;
			
			private var villageRegex:RegExp = new RegExp(/\((.+)\)\[([0-9]+)\|([0-9]+)\]/gm);
			
			private var attV_name:Vector.<String>;
			private var attV_coor:Vector.<Point>;
			private var attV_id:Vector.<Number>;
			private var tarV_name:Vector.<String>;
			private var tarV_coor:Vector.<Point>;
			private var tarV_id:Vector.<Number>;
			private var attComponents:Vector.<AttComponent>;
			
			private var plan:String;
			private var planVec:Vector.<Attack>;
			private var dtf:DateTimeFormatter;
			
			private var landingTime:Date;
			
			private var saveFR:FileReference;
			private var file:FileReference;
			private var loaded:Vector.<Attack>;
			
			protected function init(event:FlexEvent):void
			{
				//init app variables
				attV_coor = new Vector.<Point>();
				attV_name = new Vector.<String>();
				tarV_coor = new Vector.<Point>();
				tarV_name = new Vector.<String>();
				
				attV_id = new Vector.<Number>();
				tarV_id = new Vector.<Number>();
				
				attComponents = new Vector.<AttComponent>();
				
				planVec = new Vector.<Attack>();
			}
			
			protected function parseInputsBtn_clickHandler(event:MouseEvent):void
			{
				attV_coor.length = 0;
				attV_name.length = 0;
				tarV_coor.length = 0;
				tarV_name.length = 0;
				attV_id.length = 0;
				tarV_id.length = 0;
				
				attComponents.length = 0;
				attCompGroup.removeAllElements();
				
				statusTxt2.text = "";
				
				statusTxt.text = "Parsing attacking villages... ";
				var attR:Object = villageRegex.exec(attVilsTxt.text);
				while(attR != null) {
					if(!attPointExisted(Number(attR[2]), Number(attR[3]))) {
						attV_name.push(new String(attR[1]));
						attV_coor.push(new Point(Number(attR[2]), Number(attR[3])));
						attV_id.push(Number(attR[4]));
						attR = villageRegex.exec(attVilsTxt.text);
					}
				}
				
				statusTxt.text = "Parsing target villages... ";
				var tarR:Object = villageRegex.exec(targetsTxt.text);
				while(tarR != null) {
					if(!tarPointExisted(Number(tarR[2]), Number(tarR[3]))) {
						tarV_coor.push(new Point(Number(tarR[2]), Number(tarR[3])));
						tarV_name.push(new String(tarR[1]));
						tarV_id.push(Number(tarR[4]));
						tarR = villageRegex.exec(targetsTxt.text);
					}
				}
				
				statusTxt.text = "Creating UI components... ";
				
				var targetsStr:Array = new Array();
				for(var i:uint = 0; i < tarV_coor.length; i++) {
					var targetStr:String = tarV_name[i] + ' (' + String(zeroPad(tarV_coor[i].x,2)) + '|' + String(zeroPad(tarV_coor[i].y,2)) + ')';
					targetsStr.push(targetStr);
				}
				if((attV_coor.length != 0) && (tarV_coor.length != 0)) {
					for(i = 0; i < attV_coor.length; i++) {
						var ac:AttComponent = new AttComponent();
						ac.villageCoor = attV_coor[i];
						ac.villageName = attV_name[i];
						ac.villageId = attV_id[i];
						ac.targetsList = targetsStr;
						ac.worldSpeed = Number(worldSpeedTxt.text);
						attComponents.push(ac);
					}
					statusTxt.text = "Placing UI Components...";
					placeAttComponents();
				} else {
					statusTxt.text = "Need at least 1 attacking village or 1 defending village";
				}
			}
			
			private function placeAttComponents():void
			{
				for(var i:Number = 0; i < attV_coor.length; i++) {
					attCompGroup.addElement(attComponents[i]);
				}
				statusTxt.text = "UI components placed";
			}
			
			private function attPointExisted(x:Number, y:Number):Boolean
			{
				for(var i:uint = 0; i < attV_coor.length; i++) {
					if((attV_coor[i].x == x) && (attV_coor[i].y == y)) {
						return true;
					}
				}
				return false;
			}
			
			private function tarPointExisted(x:Number, y:Number):Boolean {
				for(var i:uint = 0; i < tarV_coor.length; i++) {
					if((tarV_coor[i].x == x) && (tarV_coor[i].y == y)) {
						return true;
					}
				}
				return false;
			}
			
			protected function enablePlanMakers(event:Event):void
			{
				statusTxt.text = "";
				statusTxt2.text = "";
				if(attDate.selectedDate != null) {
					makePlanBtn.enabled = true;
					massFakerBtn.enabled = true;
					condenseBtn.enabled = true;
				}
			}
			
			protected function makePlanBtn_clickHandler(event:MouseEvent):void
			{
				var noble:Boolean = false;
				
				plan = new String();
				planVec.length = 0;
				
				landingTime = new Date();
				
				landingTime.dateUTC = attDate.selectedDate.date;
				landingTime.monthUTC = attDate.selectedDate.month;
				landingTime.fullYearUTC = attDate.selectedDate.fullYear;
				landingTime.hoursUTC = attHour.value;
				landingTime.minutesUTC = attMin.value;
				landingTime.secondsUTC = attSec.value;
				
				for(var i:uint = 0; i < attComponents.length; i++) {
					var target:Point = attComponents[i].target;
					var targetName:String = attComponents[i].targetName;
					var targetId:Number = attComponents[i].targetId;
					
					var originName:String = attComponents[i].villageName;
					var origin:Point = attComponents[i].villageCoor;
					var originId:Number = attComponents[i].villageId;
					
					if(attComponents[i].target != null) {
						var attLandingTime:Date = new Date(landingTime);
						var attType:String = attComponents[i].attUnitType.selectedItem;
						var wallNuke:Boolean = attComponents[i].prioritzeAttackCB.selected;
						
						if(attType != Units.SNOB) {
							if(wallNuke) {
								attLandingTime.seconds = landingTime.seconds - 2;
							} else {
								attLandingTime.seconds = landingTime.seconds - 1;
							}
						} else {
							noble = true;
						}
						
						var attTravelTime_inSeconds:Number = Attack.calculateDistance(origin, target)*Attack.calculateArmySpeed(attType, Number(worldSpeedTxt.text));
						var attStartTime:Date = Attack.calculateLaunchTime(attTravelTime_inSeconds, attLandingTime);
						var attack:Attack = new Attack(origin, originName, originId, target, targetName, targetId, attLandingTime, attStartTime, attType);
						planVec.push(attack);
					}
				}
				
				if(planVec.length > 0) {
					Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, "");
					outputPlan(false);
				} else {
					statusTxt.text = "No plans can be generated";
					statusTxt2.text = "";
					Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, "");
				}
			}
			
			private function formatDateToUTC(d:Date):String {
				var str:String = String(zeroPad(d.dateUTC,2)) + '/' + String(zeroPad(d.monthUTC+1,2)) +'/' + String(d.fullYearUTC) + ' at ' + String(zeroPad(d.hoursUTC,2)) + ':'+String(zeroPad(d.minutesUTC,2)) + ':'+String(zeroPad(d.secondsUTC,2));
				return str;
			}
			
			private function formateDateToLocal(d:Date):String {
				var str:String = String(zeroPad(d.date,2)) + '/' + String(zeroPad(d.month+1,2)) +'/' + String(d.fullYear) + ' at ' + String(zeroPad(d.hours,2)) + ':'+String(zeroPad(d.minutes,2)) + ':'+String(zeroPad(d.seconds,2));
				return str;
			}
			
			private function outputPlan(fake:Boolean):void {
				planVec = planVec.sort(sortByLaunchTime);
				plan = "//Earliest launch time (UTC): "+ formatDateToUTC(planVec[0].launchDate) +"\n";
				plan += "//Landing time (UTC): "+formatDateToUTC(landingTime)+"\n\n";
				
				var type:String = "";
				
				for(var i:Number = 0; i < planVec.length; i++) {
					if(fake == true) {
						type = "fake"; 
					} else {
						if(planVec[i].attackUnitType != AttComponent.SNOB) {
							type = "normal";
						} else if(planVec[i].attackUnitType == AttComponent.SNOB) {
							type = "noble";
						}
					}
					
					plan += "Origin: " + planVec[i].originName + ' (' + String(planVec[i].origin.x) + "|" + String(planVec[i].origin.y) + ")\n";
					plan += "Target: " + planVec[i].targetName + ' (' + String(planVec[i].target.x) + "|" + String(planVec[i].target.y) + ")\n";
					plan += "Launch time (UTC): " + formatDateToUTC(planVec[i].launchDate) + '\n';
					plan += "Launch time (Local): " + formateDateToLocal(planVec[i].launchDate) + '\n';
					plan += "Attack land time (UTC): " + formatDateToUTC(planVec[i].landingDate) + '\n'; 
					plan += "Type: " + type + '\n';
					plan += "Slowest unit: " + planVec[i].attackUnitType + '\n\n';
				}
				
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, "");
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, plan);
				
				statusTxt.text = "Earliest Launch Time (UTC): " + formatDateToUTC(planVec[0].launchDate) + " | Land Time (UTC): " + formatDateToUTC(planVec[0].landingDate);
				statusTxt2.text = "Earliest Launch Time (Local): " + formateDateToLocal(planVec[0].launchDate) + " | Land Time (Local): " + formateDateToLocal(planVec[0].landingDate);
				
				saveBtn.enabled = true;
			}
			
			private function sortByLaunchTime(a:Attack, b:Attack):Number
			{
				if(a.launchDate.valueOf() < b.launchDate.valueOf()) {
					return -1;
				} else if(a.launchDate.valueOf() > b.launchDate.valueOf()) {
					return 1;
				} else {
					return 0;
				}
			}
			
			protected function inputs_changedHandler(event:TextOperationEvent):void
			{
				statusTxt.text = "";
				statusTxt2.text = "";
			}
			
			private function zeroPad(number:int, width:int):String {
				var ret:String = ""+number;
				while( ret.length < width )
					ret="0" + ret;
				return ret;
			}
			
			protected function clearMatchupsBtn_clickHandler(event:MouseEvent):void
			{
				statusTxt.text = "";
				statusTxt2.text = "";
				attComponents.length = 0;
				attCompGroup.removeAllElements();
			}
			
			protected function massFakerBtn_clickHandler(event:MouseEvent):void
			{
				planVec.length = 0;
				
				landingTime = new Date();
				
				landingTime.dateUTC = attDate.selectedDate.date;
				landingTime.monthUTC = attDate.selectedDate.month;
				landingTime.fullYearUTC = attDate.selectedDate.fullYear;
				landingTime.hoursUTC = attHour.value;
				landingTime.minutesUTC = attMin.value;
				landingTime.secondsUTC = attSec.value;
				
				var nF:Number = 0;
				if(numFakesTxt.text != "") {
					if(Number(numFakesTxt.text) > attV_coor.length) {
						nF = attV_coor.length;
					} else {
						nF = Number(numFakesTxt.text);
					}
				} else {
					nF = attV_coor.length;
				}
				
				for(var j:uint = 0; j < tarV_coor.length; j++) {
					for(var i:uint = 0; i < nF; i++) {
						var attVCoorIndex:Number = Math.floor(Math.random()*attV_coor.length);
						var fakeLandingTime1:Date = new Date(landingTime);
						var fakeTravelTime_inSeconds1:Number = Attack.calculateTravelTime(attV_coor[attVCoorIndex], tarV_coor[j], Units.RAM, Number(worldSpeedTxt.text));
						var fakeStartTime1:Date = Attack.calculateLaunchTime(fakeTravelTime_inSeconds1, fakeLandingTime1);
						var fakeAttack1:Attack = new Attack(attV_coor[attVCoorIndex], attV_name[attVCoorIndex], attV_id[attVCoorIndex], tarV_coor[j], tarV_name[j], tarV_id[j], landingTime, fakeStartTime1, Units.RAM);
						planVec.push(fakeAttack1);
					}
				}
				
				outputPlan(true);
			}
			
			protected function condenseBtn_clickHandler(event:MouseEvent):void
			{
				attCompGroup.removeAllElements();
				for(var i:Number = 0; i < attComponents.length; i++) {
					if(attComponents[i].target == null) {
						attComponents.splice(i, 1);
					} else {
						attCompGroup.addElement(attComponents[i]);
					}
				}
			}
			
			protected function saveBtn_clickHandler(event:MouseEvent):void
			{
				var saveContent:Vector.<Attack> = planVec.slice();
				
				saveFR = new FileReference();
				saveFR.save(JSON.stringify(saveContent), "plan.json");
			}
			
			protected function loadBtn_clickHandler(event:MouseEvent):void
			{
				file = new FileReference();
				file.addEventListener(Event.SELECT, onFileSelected);
				file.addEventListener(Event.COMPLETE, onFileLoaded);
				file.browse([new FileFilter("JSON file", "*.json")]);
			}
			
			protected function onFileSelected(event:Event):void
			{
				file.load();
			}
			
			protected function onFileLoaded(event:Event):void
			{
				loaded = new Vector.<Attack>();
				var targets:Array = new Array();
				
				var obj:Object = JSON.parse(file.data.toString());
				for(var i:uint = 0; i < obj.length; i++) {
					loaded.push(new Attack(	new Point(obj[i].origin[0], obj[i].origin[1]), obj[i].originName, obj[i].originId,
						new Point(obj[i].target[0], obj[i].target[1]), obj[i].targetName, obj[i].targetId,
						new Date(Date.parse(obj[i].landingDate)), new Date(Date.parse(obj[i].launchDate)), obj[i].attackUnitType));
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" horizontalAlign="center"/>
	</s:layout>
	<s:HGroup width="100%" height="20%">
		<s:VGroup height="100%" width="50%">
			<s:Label fontSize="12" fontWeight="bold" text="Attacking villages (1)"/>
			<s:TextArea id="attVilsTxt" width="100%" height="100%"
						change="inputs_changedHandler(event)" prompt="(name)[xxx|yyy]"/>
		</s:VGroup>
		<s:VGroup height="100%" width="50%">
			<s:Label fontSize="12" fontWeight="bold" text="Target villages (1)"/>
			<s:TextArea id="targetsTxt" width="100%" height="100%"
						change="inputs_changedHandler(event)" prompt="(name)[xxx|yyy]"/>
		</s:VGroup>
	</s:HGroup>
	<s:VGroup horizontalAlign="center">
		<s:HGroup verticalAlign="middle">
			<s:Button id="parseInputsBtn" label="Parse Inputs (2)" click="parseInputsBtn_clickHandler(event)"/>
			<s:Button id="clearMatchupsBtn" label="Clear Plan Nodes" click="clearMatchupsBtn_clickHandler(event)"/>
			<s:Button id="massFakerBtn" label="Mass Faker (4)" click="massFakerBtn_clickHandler(event)"
					  enabled="false"/>
			<s:TextInput id="numFakesTxt" width="149" prompt="max # of fakes/village (4)"/>
			<s:Button id="makePlanBtn" label="Make Plan (4)" click="makePlanBtn_clickHandler(event)"
					  enabled="false"/>
		</s:HGroup>
		<s:Label fontWeight="bold"
				 text="UTC DD/MM/YY (24-hour) - Plan automatically copied to clipboard"/>
		<s:HGroup textAlign="center" verticalAlign="middle">
			<s:Label text="(3)"/>
			<mx:DateField id="attDate" change="enablePlanMakers(event)" formatString="DD/MM/YY"/>
			<s:NumericStepper id="attHour" change="enablePlanMakers(event)" maximum="23" minimum="0"
							  stepSize="1"/>
			<s:Label text=":"/>
			<s:NumericStepper id="attMin" change="enablePlanMakers(event)" maximum="59" minimum="0"
							  stepSize="1"/>
			<s:Label text=":"/>
			<s:NumericStepper id="attSec" change="enablePlanMakers(event)" maximum="59" minimum="0"
							  stepSize="0"/>
			<s:Label text="World Speed"/>
			<s:TextInput id="worldSpeedTxt" width="30" prompt="1" text="1" textAlign="center"/>
			<s:Spacer width="20" height="10"/>
		</s:HGroup>
	</s:VGroup>
	<s:HGroup>
		<s:Button id="condenseBtn" label="Condense (5)" click="condenseBtn_clickHandler(event)"
				  enabled="false"/>
		<s:Button id="saveBtn" label="Save as JSON (5)" click="saveBtn_clickHandler(event)" enabled="false"/>
	</s:HGroup>
	
	<s:Label id="statusTxt" width="100%" textAlign="center" verticalAlign="middle"/>
	<s:Label id="statusTxt2" width="100%" textAlign="center" verticalAlign="middle"/>
	<s:Scroller id="scroller" horizontalScrollPolicy="auto" height="100%" width="100%">
		<s:VGroup id="attCompGroup" width="100%" height="100%" horizontalAlign="center" textAlign="center" verticalAlign="top">
		</s:VGroup>
	</s:Scroller>
</s:Application>
